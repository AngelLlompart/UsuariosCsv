/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spdvi;

import java.awt.event.WindowEvent;
import java.io.*;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author angel
 */
public class UsersFrame extends javax.swing.JFrame {
    ArrayList<User> users = new ArrayList<User>();
    final String filename = "Hola.csv";
    boolean dataChanged = false;
    /**
     * Creates new form UsersFrame
     */
    public UsersFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupGenders = new javax.swing.ButtonGroup();
        txtLastName = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        radMale = new javax.swing.JRadioButton();
        radFemale = new javax.swing.JRadioButton();
        radNone = new javax.swing.JRadioButton();
        lblAlive = new javax.swing.JLabel();
        chkAlive = new javax.swing.JCheckBox();
        btnPrint = new javax.swing.JButton();
        lblBirthDate = new javax.swing.JLabel();
        txtBirthDate = new javax.swing.JTextField();
        lblId = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblLastName = new javax.swing.JLabel();
        btnClearFile = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        btnLoadList = new javax.swing.JButton();
        btnDeleteSelected = new javax.swing.JButton();
        btnSaveList = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniExit = new javax.swing.JMenuItem();
        mnuCRUD = new javax.swing.JMenu();
        mniInsert = new javax.swing.JMenuItem();
        mniLoad = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastNameActionPerformed(evt);
            }
        });

        lblGender.setText("Gender:");

        btnGroupGenders.add(radMale);
        radMale.setText("Male");
        radMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radMaleActionPerformed(evt);
            }
        });

        btnGroupGenders.add(radFemale);
        radFemale.setText("Female");

        btnGroupGenders.add(radNone);
        radNone.setText("None");

        lblAlive.setText("IsAlive:");

        chkAlive.setText("Alive");

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        lblBirthDate.setText("BirthDate:");

        txtBirthDate.setToolTipText("Write a date (dd-MM-yyyy)");
        txtBirthDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtBirthDateFocusGained(evt);
            }
        });
        txtBirthDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBirthDateActionPerformed(evt);
            }
        });

        lblId.setText("Id:");

        lblFirstName.setText("FirstName:");

        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });

        lblLastName.setText("LastName:");

        btnClearFile.setText("Clear file");
        btnClearFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFileActionPerformed(evt);
            }
        });

        lstUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstUsers);

        btnLoadList.setText("Load");
        btnLoadList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadListActionPerformed(evt);
            }
        });

        btnDeleteSelected.setText("Delete");
        btnDeleteSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedActionPerformed(evt);
            }
        });

        btnSaveList.setText("Save");
        btnSaveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveListActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        mnuFile.setText("File");

        mniExit.setMnemonic('E');
        mniExit.setText("Exit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        jMenuBar1.add(mnuFile);

        mnuCRUD.setText("CRUD");

        mniInsert.setText("Insert");
        mniInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniInsert);

        mniLoad.setText("Load");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniLoad);

        mniUpdate.setText("Update");
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniUpdate);

        mniDelete.setText("Delete");
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        mnuCRUD.add(mniDelete);

        jMenuBar1.add(mnuCRUD);

        mnuHelp.setText("Help");
        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPrint)
                        .addGap(45, 45, 45)
                        .addComponent(btnUpdate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(lblId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblFirstName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblBirthDate)
                                    .addGap(6, 6, 6)
                                    .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblAlive)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkAlive, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLastName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblGender)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(radMale, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(radNone, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(btnClearFile))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(btnLoadList))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDeleteSelected)
                        .addGap(137, 137, 137)
                        .addComponent(btnSaveList)))
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblId)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblFirstName)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBirthDate)
                            .addComponent(txtBirthDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAlive)
                            .addComponent(chkAlive)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastName)
                            .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender)
                            .addComponent(radMale))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radFemale)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radNone)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnPrint))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClearFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadList)
                    .addComponent(btnSaveList)
                    .addComponent(btnDeleteSelected))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastNameActionPerformed

    private void radMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radMaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radMaleActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        String genders = "";
        
        
        try{
            if (radMale.isSelected()){
                genders = "Male";
            }else if (radFemale.isSelected()){
                genders = "Female";
            } else if (radNone.isSelected()){
                genders = "None";
            }
            else throw new ArgumentNullException("A gender must be selected");
        }catch(ArgumentNullException e){
            System.err.println("A gender must be selected");
            JOptionPane.showMessageDialog(null,
            "A gender must be selected",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
        


        LocalDate birthDate = null;
        try{
            birthDate = LocalDate.parse(txtBirthDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy"));
        }catch(DateTimeParseException pe){
            System.err.println("Incorrect date or format." + System.lineSeparator() + "Date format must be (dd-MM-yyyy)");
            JOptionPane.showMessageDialog(null,
            "Incorrect date or format.\nDate format must be (dd-MM-yyyy)",
            "Error",
            JOptionPane.ERROR_MESSAGE);
           /*EncuestaDialog errorDate = new EncuestaDialog(this, true);
            *errorDate.getLblMessage().setText("Incorrect date or format." + System.lineSeparator() + "Date format must be (dd-MM-yyyy)");
            *errorDate.setVisible(true);
            */
        }
        
        
        try{
            Integer.parseInt(txtId.getText());
        }catch(NumberFormatException nfe){
            System.err.println("Id must be an int");
            JOptionPane.showMessageDialog(null,
            "Id must be an int",
            "Error",
            JOptionPane.ERROR_MESSAGE);
        }
        
        
        User user = new User(Integer.parseInt(txtId.getText()),
            txtFirstName.getText(),
            txtLastName.getText(),
            birthDate,
            genders,
            chkAlive.isSelected());

        users.add(user);
        
        //txaUsers.append(user.toString());   
        UpdateUserListView();
        dataChanged = true;
    }//GEN-LAST:event_btnPrintActionPerformed

    private void txtBirthDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBirthDateActionPerformed
        
    }//GEN-LAST:event_txtBirthDateActionPerformed

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void txtBirthDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtBirthDateFocusGained
    }//GEN-LAST:event_txtBirthDateFocusGained

    private void btnClearFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFileActionPerformed
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(filename));
            out.write("");
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnClearFileActionPerformed

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstUsersValueChanged
        String selectedUser = lstUsers.getSelectedValue();
        
        if(selectedUser != null){
            String res[] = selectedUser.split(":");
            for (User u: users){
                if(u.getId() == Integer.parseInt(res[0])){
                    txtId.setText(String.valueOf(u.getId()));
                    txtFirstName.setText(u.getFirstName());
                    txtLastName.setText(u.getLastName());
                    String birthDate = u.getBirthDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                    txtBirthDate.setText(birthDate);
                    if(u.getGender().equals("Male")){
                        radMale.setSelected(true);
                    }else if(u.getGender().equals("Female")){
                        radFemale.setSelected(true);
                    }else{
                        radNone.setSelected(true);
                    }
                    chkAlive.setSelected(u.isIsAlive());
                }
            }
        }
    }//GEN-LAST:event_lstUsersValueChanged

    private void btnLoadListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadListActionPerformed
        LoadList();
    }//GEN-LAST:event_btnLoadListActionPerformed

    private void btnDeleteSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedActionPerformed
        String selectedUser = lstUsers.getSelectedValue();

        /*int lastIndex = selectedUser.indexOf(":");
        *int selectedUserId = Integer.parseInt(selectedUser.substring(0, lastIndex));
        */
        if (selectedUser != null){
            String res[] = selectedUser.split(":");
            for (int i = 0; i < users.size(); i++){
                if(users.get(i).getId() == Integer.parseInt(res[0])){
                    users.remove(users.get(i));
                    break;
                }
            }  
            UpdateUserListView();
            dataChanged = true;
        }
        else{
            JOptionPane.showMessageDialog(null,
            "No user selected",
            "Error",
            JOptionPane.INFORMATION_MESSAGE);
        }
            
       
    }//GEN-LAST:event_btnDeleteSelectedActionPerformed

    private void btnSaveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveListActionPerformed
        Save();
    }//GEN-LAST:event_btnSaveListActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        String genders = "";
        boolean insert = true;
        if (radMale.isSelected()){
                genders = "Male";
            }else if (radFemale.isSelected()){
                genders = "Female";
            } else{
                genders = "None";
            }
        for(User u: users){
            if(u.getId() == Integer.parseInt(txtId.getText())){
                insert = false;
                u.setId(Integer.parseInt(txtId.getText()));
                u.setFirstName(txtFirstName.getText());
                u.setLastName(txtLastName.getText());
                u.setBirthDate(LocalDate.parse(txtBirthDate.getText(), DateTimeFormatter.ofPattern("dd-MM-yyyy")));
                u.setGender(genders);
                u.setIsAlive(chkAlive.isSelected());
                UpdateUserListView();
                dataChanged = true;
            }
        }
        if(insert) {
            UpdateToInsert confirm = new UpdateToInsert(this, true);
            confirm.setVisible(true);
            if(confirm.isInsert()){
                btnPrint.doClick();
                dataChanged = true;
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        LoadList();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(dataChanged){
            Save();
        }
        //confirmar cambios y guardar
    }//GEN-LAST:event_formWindowClosing

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        btnDeleteSelected.doClick();
    }//GEN-LAST:event_mniDeleteActionPerformed

    private void mniInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertActionPerformed
        //btnPrintActionPerformed(evt); no, millor doClick() per problemes d'events, 
        //pot ser que no es doni el mateix evt per parametre que el que emplea normalment
        btnPrint.doClick();
    }//GEN-LAST:event_mniInsertActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_mniExitActionPerformed

    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed
        btnLoadList.doClick();
    }//GEN-LAST:event_mniLoadActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        btnUpdate.doClick();
    }//GEN-LAST:event_mniUpdateActionPerformed

    private void UpdateUserListView(){
        try{
            DefaultListModel usersListModel = new DefaultListModel();
            for (User u: users) {
                usersListModel.addElement(u.toString());
            }
            lstUsers.setModel(usersListModel);
        }catch(Exception e){
        }
    }
    
    
    private void Save(){
        ConfirmSave confirm = new ConfirmSave(this, true);
        confirm.setVisible(true);
        if(confirm.getConfirm()){
            try {
                BufferedWriter out = new BufferedWriter(new FileWriter(filename));
                for(int i = 0; i < users.size(); i++)
                    out.write(users.get(i).toString2());
                out.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            dataChanged = false;
        }
        
    }
    private void LoadList(){
        BufferedReader in = null;
        try {
            users.clear();
            in = new BufferedReader(new FileReader(filename));
            String strCurrentLine;
            String res[];
            while ((strCurrentLine = in.readLine()) != null) {
                res = strCurrentLine.split(",");
                
                boolean isAlive;
                if (res[5].equals("Alive")){
                        isAlive = true;
                } else {
                    isAlive = false;
                }
                
                User user = new User(Integer.parseInt(res[0]), res[1], res[2], LocalDate.parse(res[3]), res[4], isAlive);
                //LocalDate years = LocalDate.parse(res[3], DateTimeFormatter.ofPattern("yyyy-MM-dd"));
                //txaUsers.append(res[0] + ": " + res[1] + ", " + res[2] + " - " + (LocalDate.now().getYear() - years.getYear()) + " years old - " + res[4] + " - " + res[5] + "\n");
                users.add(user);
            }
            in.close();
            UpdateUserListView();
        }catch(FileNotFoundException e){
            e.printStackTrace();
        }catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UsersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UsersFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearFile;
    private javax.swing.JButton btnDeleteSelected;
    private javax.swing.ButtonGroup btnGroupGenders;
    private javax.swing.JButton btnLoadList;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSaveList;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox chkAlive;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAlive;
    private javax.swing.JLabel lblBirthDate;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblId;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JList<String> lstUsers;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniInsert;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenu mnuCRUD;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JRadioButton radFemale;
    private javax.swing.JRadioButton radMale;
    private javax.swing.JRadioButton radNone;
    private javax.swing.JTextField txtBirthDate;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtLastName;
    // End of variables declaration//GEN-END:variables
}
